{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      products: [],\n      loadedImages: {} // Массив для хранения загруженных изображений\n    };\n  },\n  async created() {\n    try {\n      const token = localStorage.getItem('token');\n      const headers = {\n        'Authorization': `Bearer ${token}`\n      };\n      const response = await axios.get('/products/my', {\n        headers\n      });\n      this.products = response.data;\n      console.log(response.data);\n\n      // Загрузка изображений\n      for (const product of this.products) {\n        await this.fetchImage(product.image);\n      }\n    } catch (error) {\n      console.error('Error fetching products:', error);\n    }\n  },\n  methods: {\n    async fetchImage(imageName) {\n      try {\n        const response = await axios.get(`/api/images/${imageName}`, {\n          responseType: 'arraybuffer'\n        });\n        if (response.status === 200) {\n          const imageUrl = URL.createObjectURL(new Blob([response.data]));\n          // Сохраните изображение в массиве loadedImages\n          this.$set(this.loadedImages, imageName, imageUrl);\n        }\n      } catch (error) {\n        console.error('Ошибка при загрузке изображения:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","products","loadedImages","created","token","localStorage","getItem","headers","response","get","console","log","product","fetchImage","image","error","methods","imageName","responseType","status","imageUrl","URL","createObjectURL","Blob","$set"],"sources":["d:\\Programs\\OSPanel\\domains\\back-adil\\src\\views\\MyProducts.vue"],"sourcesContent":["<template>\r\n  <h2>Ваши объявления</h2>\r\n  <div class=\"container mx-auto mt-0\">\r\n    <div class=\"flex flex-wrap justify-center\">\r\n      <div v-for=\"product in products\" :key=\"product.id\" class=\"w-75 rounded overflow-hidden shadow-lg m-4 transition transform hover:-translate-y-1 hover:shadow-2xl\">\r\n        <div class=\"px-6 py-4 bg-white\">\r\n          <!-- Используйте уже загруженные изображения из массива loadedImages -->\r\n          <img :src=\"loadedImages[product.image]\" alt=\"Product Image\">\r\n          <div class=\"font-bold text-xl mb-2 text-gray-800\">{{ product.name }}</div>\r\n          <p class=\"text-gray-700 text-base mb-4\">\r\n            Описание\r\n            <br>\r\n            {{ product.description }}\r\n          </p>\r\n          <p class=\"text-gray-700 text-base mb-4\">\r\n            Цена\r\n            <br>\r\n            {{ product.price }}\r\n          </p>\r\n          <p class=\"text-gray-700 text-base mb-4\">\r\n            Количество\r\n            <br>\r\n            {{ product.quantity }}\r\n          </p>\r\n        </div>\r\n        <div class=\"px-6 py-3 bg-gradient-to-r from-blue-500 to-teal-400\">\r\n          Категория:\r\n          <br>\r\n          <span class=\"inline-block bg-white rounded-full px-3 py-1 text-sm font-semibold text-gray-700 mr-2 mb-2\">{{ product.category.name }}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [],\r\n      loadedImages: {}, // Массив для хранения загруженных изображений\r\n    };\r\n  },\r\n  async created() {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      const headers = {\r\n        'Authorization': `Bearer ${token}`\r\n      };\r\n      const response = await axios.get('/products/my', { headers });\r\n      this.products = response.data;\r\n      console.log(response.data);\r\n\r\n      // Загрузка изображений\r\n      for (const product of this.products) {\r\n        await this.fetchImage(product.image);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching products:', error);\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchImage(imageName) {\r\n      try {\r\n        const response = await axios.get(`/api/images/${imageName}`, { responseType: 'arraybuffer' });\r\n        if (response.status === 200) {\r\n          const imageUrl = URL.createObjectURL(new Blob([response.data]));\r\n          // Сохраните изображение в массиве loadedImages\r\n          this.$set(this.loadedImages, imageName, imageUrl);\r\n        }\r\n      } catch (error) {\r\n        console.error('Ошибка при загрузке изображения:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";;;AAoCA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,CAAC,CAAC,CAAE;IACpB,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,IAAI;MACF,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,OAAM,GAAI;QACd,eAAe,EAAG,UAASH,KAAM;MACnC,CAAC;MACD,MAAMI,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,cAAc,EAAE;QAAEF;MAAQ,CAAC,CAAC;MAC7D,IAAI,CAACN,QAAO,GAAIO,QAAQ,CAACR,IAAI;MAC7BU,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACR,IAAI,CAAC;;MAE1B;MACA,KAAK,MAAMY,OAAM,IAAK,IAAI,CAACX,QAAQ,EAAE;QACnC,MAAM,IAAI,CAACY,UAAU,CAACD,OAAO,CAACE,KAAK,CAAC;MACtC;IACF,EAAE,OAAOC,KAAK,EAAE;MACdL,OAAO,CAACK,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMH,UAAUA,CAACI,SAAS,EAAE;MAC1B,IAAI;QACF,MAAMT,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAE,eAAcQ,SAAU,EAAC,EAAE;UAAEC,YAAY,EAAE;QAAc,CAAC,CAAC;QAC7F,IAAIV,QAAQ,CAACW,MAAK,KAAM,GAAG,EAAE;UAC3B,MAAMC,QAAO,GAAIC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACf,QAAQ,CAACR,IAAI,CAAC,CAAC,CAAC;UAC/D;UACA,IAAI,CAACwB,IAAI,CAAC,IAAI,CAACtB,YAAY,EAAEe,SAAS,EAAEG,QAAQ,CAAC;QACnD;MACF,EAAE,OAAOL,KAAK,EAAE;QACdL,OAAO,CAACK,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}